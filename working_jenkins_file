node('master') {
try {
		
	// Get Artifactory server instance, defined in the Artifactory Plugin administration page.
    def server = Artifactory.server "Artifactory_local"
    // Create an Artifactory Maven instance.
    def rtMaven = Artifactory.newMavenBuild()
    def buildInfo

	stage('Basic tool Check') {
		
					echo 'Java version'
					bat 'java -version'
					
					echo 'Maven verion'
					bat 'mvn --version'
	
				
	}
    stage('git preparation') { // for display purposes
        // Get some code from a GitHub repository
		 echo 'Calling::: Git from url https://github.com/naveenkumarchinde/HelloWorld.git'
        git credentialsId: 'naveenkumarchinde', url: 'https://github.com/naveenkumarchinde/HelloWorld.git'
       
    }
	
	stage('Maven-Jfrog Artifactory configuration') {
        // Tool name from Jenkins configuration
        rtMaven.tool = "LOCAL_MAVEN"
        // Set Artifactory repositories for dependencies resolution and artifacts deployment.
        rtMaven.deployer releaseRepo:'libs-release-local', snapshotRepo:'libs-snapshot-local', server: server
        rtMaven.resolver releaseRepo:'libs-release', snapshotRepo:'libs-snapshot', server: server
    }
	
    stage('build') {
		echo 'Calling Maven Build'
         
			buildInfo = rtMaven.run pom: 'pom.xml', goals: 'clean install package'
		
    }
	if (currentBuild.currentResult == 'SUCCESS') {
        stage('junit test') {
		//Run Junit test
		echo 'Calling Junit'
			junit '**/target/surefire-reports/TEST-*.xml'
		}
		stage('SonarQube analysis') {
			withSonarQubeEnv(credentialsId: 'admin_sonar', installationName: 'local_sonarqube') { 
			  bat 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
			}
		  }
		stage("Quality Gate"){
          timeout(time: 3, unit: 'MINUTES') {
              def qg = waitForQualityGate()
              if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
              }
          }
      }
		stage('Archive') {
		//package 
			echo 'Calling Archive'
			archiveArtifacts 'target/*.jar'
			server.publishBuildInfo buildInfo
		}
		
		stage('downstream Job QA Environment') {
			build job: 'QA_Deploy'
		}
    }
  } catch (e) {
    currentBuild.result = "FAILED"
	notifyWithEmail(currentBuild.result,e.toString())
    throw e
  }
}

def notifyWithEmail(String buildStatus,String errorMsg) {
buildStatus = buildStatus ?: 'SUCCESS'
errorMsg = errorMsg ?: 'No-ERROR'

  emailext (
      subject: "Jenkins:Email: STATUS: ${buildStatus}: Job : '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: """STATUS: ${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' \n Error-Details: \n ${errorMsg}""",
      to: "nkchinde@gmail.com"
    )
}
